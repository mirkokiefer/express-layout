// Generated by CoffeeScript 1.3.3
(function() {
  var async, layout, render, utils, view;

  async = require('async');

  utils = require('livelyutils');

  render = function(view, defaultRenderFun, cb) {
    var data, evalData, renderFun, renderRequired;
    data = view.data ? view.data : function(cb) {
      return cb(null, {});
    };
    renderFun = view.renderFun ? view.renderFun : defaultRenderFun;
    renderRequired = function(cb) {
      var mapRequired;
      mapRequired = function(name, view, cb) {
        return render(view, defaultRenderFun, cb);
      };
      return utils.mapObject(view.subviews(), mapRequired, cb);
    };
    evalData = function(cb) {
      return utils.ensure(data, cb);
    };
    return async.parallel([evalData, renderRequired], function(err, _arg) {
      var data, mergedData, required;
      data = _arg[0], required = _arg[1];
      mergedData = utils.merge(data, required);
      return renderFun(view.template, mergedData, function(err, res) {
        if (err) {
          console.error(view, err);
        }
        return cb(err, res);
      });
    });
  };

  layout = function(renderFun) {
    return function(req, res, next) {
      renderFun = renderFun ? renderFun : function(view, options, cb) {
        return res.render(view, options, cb);
      };
      res.views = {};
      res.view = function(name, view) {
        if (view) {
          return res.views[name] = view;
        } else {
          return res.views[name];
        }
      };
      res.rootView = function(view) {
        return res.view('root', view);
      };
      res.renderLayout = function() {
        if (res.views) {
          return render(res.rootView(), renderFun, function(err, html) {
            return res.send(html);
          });
        }
      };
      return next();
    };
  };

  view = function(config) {
    var subviews;
    subviews = {};
    config.subviews = function() {
      return subviews;
    };
    config.subview = function(name, view) {
      if (view) {
        return subviews[name] = view;
      } else {
        return subviews[name];
      }
    };
    return config;
  };

  module.exports = {
    middleware: layout,
    view: view
  };

}).call(this);
