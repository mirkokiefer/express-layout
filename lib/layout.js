// Generated by CoffeeScript 1.3.3
(function() {
  var async, layout, render, utils;

  async = require('async');

  utils = require('livelyutils');

  render = function(name, views, defaultRenderFun, cb) {
    var data, evalData, mapRequired, renderFun, renderRequired, requires, view;
    view = views[name];
    data = view.data ? view.data : function(cb) {
      return cb(null, {});
    };
    requires = view.requires ? view.requires : [];
    renderFun = view.renderFun ? view.renderFun : defaultRenderFun;
    mapRequired = function(viewName, cb) {
      return render(viewName, views, defaultRenderFun, cb);
    };
    renderRequired = function(cb) {
      return async.map(requires, mapRequired, function(err, renderedViews) {
        var i, mapping, _i, _len;
        mapping = {};
        for (i = _i = 0, _len = requires.length; _i < _len; i = ++_i) {
          name = requires[i];
          mapping[name] = renderedViews[i];
        }
        return cb(null, mapping);
      });
    };
    evalData = function(cb) {
      return utils.ensure(data, cb);
    };
    return async.parallel([evalData, renderRequired], function(err, _arg) {
      var data, mergedData, required;
      data = _arg[0], required = _arg[1];
      mergedData = utils.merge(data, required);
      return renderFun(view.template, mergedData, cb);
    });
  };

  layout = function(renderFun) {
    return function(req, res, next) {
      renderFun = renderFun ? renderFun : function(view, options, cb) {
        return res.render(view, options, cb);
      };
      res.views = {};
      res.view = function(name, view) {
        if (view) {
          return res.views[name] = view;
        } else {
          return res.views[name];
        }
      };
      res.rootView = function(view) {
        return res.view('root', view);
      };
      res.renderLayout = function() {
        if (res.views) {
          return render('root', res.views, renderFun, function(err, html) {
            return res.send(html);
          });
        }
      };
      return next();
    };
  };

  module.exports = layout;

}).call(this);
